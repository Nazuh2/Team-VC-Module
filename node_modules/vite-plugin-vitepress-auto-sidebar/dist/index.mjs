import { join } from 'path';
import { existsSync, readFileSync, readdirSync, statSync } from 'fs';
import c from 'picocolors';

const DEFAULT_IGNORE_FOLDER = ["scripts", "components", "assets", ".vitepress"];
function log(...info) {
  console.log(c.bold(c.cyan("[auto-sidebar]")), ...info);
}
function removePrefix(str, identifier) {
  return str.replace(identifier, "");
}
function getTitleFromFile(realFileName) {
  if (!existsSync(realFileName)) {
    return void 0;
  }
  const fileExtension = realFileName.substring(
    realFileName.lastIndexOf(".") + 1
  );
  if (fileExtension !== "md" && fileExtension !== "MD") {
    return void 0;
  }
  const data = readFileSync(realFileName, { encoding: "utf-8" });
  const lines = data.split(/\r?\n/);
  for (const line of lines) {
    if (line.startsWith("# ")) {
      return line.substring(2);
    }
  }
  return void 0;
}

let option;
function createSideBarItems(targetPath, ...reset) {
  const {
    ignoreIndexItem,
    deletePrefix,
    collapsed = false,
    sideBarItemsResolved,
    beforeCreateSideBarItems,
    ignoreList = [],
    titleFromFile = false
  } = option;
  const rawNode = readdirSync(join(targetPath, ...reset));
  const node = beforeCreateSideBarItems?.(rawNode) ?? rawNode;
  const currentDir = join(targetPath, ...reset);
  if (ignoreIndexItem && node.length === 1 && node[0] === "index.md") {
    return [];
  }
  const result = [];
  for (const fname of node) {
    if (statSync(join(targetPath, ...reset, fname)).isDirectory()) {
      if (ignoreList.some((item) => item === fname || item instanceof RegExp && item.test(fname))) {
        continue;
      }
      const items = createSideBarItems(join(targetPath), ...reset, fname);
      let text = fname;
      if (titleFromFile) {
        const filenames = [
          join(currentDir, fname, "index.md"),
          join(currentDir, fname, "index.MD"),
          join(currentDir, fname, fname + ".md")
        ];
        for (const filename of filenames) {
          const title = getTitleFromFile(filename);
          if (title) {
            text = title;
            break;
          }
        }
      }
      if (deletePrefix) {
        text = removePrefix(text, deletePrefix);
      }
      if (items.length > 0) {
        const sidebarItem = {
          text,
          items
        };
        sidebarItem.collapsed = collapsed;
        result.push(sidebarItem);
      }
    } else {
      if (ignoreIndexItem && fname === "index.md" || /^-.*\.(md|MD)$/.test(fname) || ignoreList.some((item2) => item2 === fname || item2 instanceof RegExp && item2.test(fname)) || !fname.endsWith(".md")) {
        continue;
      }
      const fileName = fname.replace(/\.md$/, "");
      let text = fileName;
      if (deletePrefix) {
        text = removePrefix(text, deletePrefix);
      }
      const realFileName = join(currentDir, fname);
      if (titleFromFile) {
        const title = getTitleFromFile(realFileName);
        if (title) {
          text = title;
        }
      }
      const item = {
        text,
        link: "/" + [...reset, `${fileName}.html`].join("/")
      };
      result.push(item);
    }
  }
  return sideBarItemsResolved?.(result) ?? result;
}
function createSideBarGroups(targetPath, folder) {
  return [
    {
      items: createSideBarItems(targetPath, folder)
    }
  ];
}
function createSidebarMulti(path) {
  const {
    ignoreList = [],
    ignoreIndexItem = false,
    sideBarResolved
  } = option;
  const il = [...DEFAULT_IGNORE_FOLDER, ...ignoreList];
  const data = {};
  const node = readdirSync(path).filter(
    (n) => statSync(join(path, n)).isDirectory() && !il.includes(n)
  );
  for (const k of node) {
    data[`/${k}/`] = createSideBarGroups(path, k);
  }
  if (ignoreIndexItem) {
    for (const i in data) {
      let obj = data[i];
      if (Array.isArray(obj)) {
        obj = obj.filter((i2) => i2.items != null && i2.items.length > 0);
        if (obj.length === 0) {
          Reflect.deleteProperty(data, i);
        }
      }
    }
  }
  return sideBarResolved?.(data) ?? data;
}
function VitePluginVitePressAutoSidebar(opt = {}) {
  return {
    name: "vite-plugin-vitepress-auto-sidebar",
    configureServer({
      watcher,
      restart
    }) {
      const fsWatcher = watcher.add("*.md");
      fsWatcher.on("all", async (event, path) => {
        if (event !== "change") {
          log(`${event} ${path}`);
          try {
            await restart();
            log("update sidebar...");
          } catch {
            log(`${event} ${path}`);
            log("update sidebar failed");
          }
        }
      });
    },
    config(config) {
      option = opt;
      const { path = "/docs" } = option;
      const docsPath = join(process.cwd(), path);
      config.vitepress.site.themeConfig.sidebar = createSidebarMulti(docsPath);
      log("injected sidebar data successfully");
      return config;
    }
  };
}

export { VitePluginVitePressAutoSidebar as default };
