{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Team Voice Chat Module","text":"<p>A lightweight, customizable and efficient Team Voice Chat Module.</p>"},{"location":"#update-120","title":"Update 1.2.0","text":"<p>Added Support for Audio Effects</p>"},{"location":"#update-110","title":"Update 1.1.0","text":"<p>Added Support for developers to have Teams with voice chat disabled</p>"},{"location":"#update-100","title":"Update 1.0.0","text":"<p>Added functionality to detect when other players on your team are speaking</p>"},{"location":"API/AudioUtil/","title":"AudioUtil","text":"<p>Util library for dealing with the VoiceChatService AudioAPI</p> <p>Functions: - .CreateWire(Source, Target, Parent?) - .GetPlayersAudioDeviceInput(Player, ShouldYield) - .IsVoiceEnabledForTeam(Team) - .GetVoiceEffectsForTeam(Team)</p>"},{"location":"API/AudioUtil/#audioutilcreatewiresource-target-parent","title":"AudioUtil.CreateWire(Source, Target, Parent?)","text":"<p>Creates a wire connecting an audio stream to an audio receiver</p> <p>Parameters: - Source: An Instance Emitting an Audio Stream - Target: An Instance Receiving an Audio Stream - Parent: Any Instance</p>"},{"location":"API/AudioUtil/#audioutilgetplayersaudiodeviceinputplayer-shouldyield","title":"AudioUtil.GetPlayersAudioDeviceInput(Player, ShouldYield)","text":"<p>Returns a player's AudioDeviceInput</p> <p>Parameters: - Player: The player whose AudioDeviceInput you're trying to get - ShouldYield: If the function should yield for up to 10 seconds while waiting for the Target Player's AudioDeviceInput to Replicate</p>"},{"location":"API/AudioUtil/#audioutilisvoiceenabledforteamteam","title":"AudioUtil.IsVoiceEnabledForTeam(Team)","text":"<p>Returns true if there is no Instance parented to the team named 'VoiceDisabled', else false</p> <p>Parameters: - Team: The team to check</p>"},{"location":"API/AudioUtil/#audioutilgetvoiceeffectsforteamteam","title":"AudioUtil.GetVoiceEffectsForTeam(Team)","text":"<p>Returns the folder of VoiceEffects unter the team if it exists</p> <p>Paramters: - Team: The team with the VoiceEffects you are trying to get</p>"},{"location":"API/TeamChatClient/","title":"TeamChatClient","text":"<p>Team Voice Chat System for the client.</p> <p>Methods: - .Init() - :SetSpeakingCheckInterval(Value) - :GetSpeakingCheckInterval() - :SetSpeakingCheckInterval(Value) - :GetMinRmsLevelThreshold()</p>"},{"location":"API/TeamChatClient/#teamchatclientinit","title":"TeamChatClient.Init()","text":"<p>Called Upon TeamChat.Init() for the client. Initializes the Team Voice Chat System on the Client.</p>"},{"location":"API/TeamChatClient/#teamchatclientsetspeakingcheckintervalvalue","title":"TeamChatClient:SetSpeakingCheckInterval(Value)","text":"<p>Sets the update inverval in which TeamChatClient checks if the local player is speaking and if so, tells the server to fire the PlayerStartedSpeaking event.</p> <p>Parameters: - Value: The new value to set 'SpeakingCheckInterval' to</p>"},{"location":"API/TeamChatClient/#teamchatclientgetspeakingcheckinterval","title":"TeamChatClient:GetSpeakingCheckInterval()","text":"<p>Returns SpeakingCheckInterval</p>"},{"location":"API/TeamChatClient/#teamchatclientsetminrmslevelthresholdvalue","title":"TeamChatClient:SetMinRmsLevelThreshold(Value)","text":"<p>Sets the Minimum Speaking Volume Threshold.</p> <p>Parameters: - Value: The new value to update 'MinRmsLevelThreshold' to</p>"},{"location":"API/TeamChatClient/#teamchatclientgetminrmslevelthreshold","title":"TeamChatClient:GetMinRmsLevelThreshold()","text":"<p>Returns MinRmsLevelThreshold</p>"},{"location":"API/TeamChatServer/","title":"TeamChatServer","text":"<p>Team Voice Chat System for the Server.</p> <p>Methods: - .Init()</p>"},{"location":"API/TeamChatServer/#teamchatserverinit","title":"TeamChatServer.Init()","text":"<p>Called Upon TeamChat.Init() for the Server. Initializes the Team Voice Chat System on the Server.</p>"},{"location":"guide/getting-started/","title":"Getting Started","text":"<p>The setup is quite simple, you just need to require TeamChat and call the <code>.Init()</code> function.</p> <p>Server</p> <pre><code>-- Imports\nlocal TeamChat = require(path.to.module)\n\n-- Runtime\nlocal TeamChatServer = TeamChat.Init()\n</code></pre> <p>Client</p> <pre><code>-- Imports\nlocal TeamChat = require(path.to.module)\n\n-- Runtime\nlocal TeamChatClient = TeamChat.Init()\n</code></pre>"},{"location":"guide/installation/","title":"Installation","text":""},{"location":"guide/installation/#from-rbxm","title":"<code>From RBXM:</code>","text":"<p>Get the latest version of TeamVoice from here, and import it into studio and you're done!</p>"},{"location":"guide/examples/audio-effects/","title":"Audio effects","text":"<p>Server</p> <pre><code>-- Services\nlocal TeamService = game:GetService('Teams')\n\n-- Imports\nlocal TeamChat = require(path.to.module)\n\n-- Runtime\n\n-- Setup Team Effects\nlocal function CreateEffectFolder(Parent: Team) : Folder\n    local Folder = Instance.new('Folder')\n    Folder.Name = 'VoiceEffects'\n    Folder.Parent = Parent\n\n    return Folder\nend\n\nlocal BlueTeamFolder = CreateEffectFolder(TeamService.Blue)\nInstance.new('AudioEcho').Parent = BlueTeamFolder\n\nlocal RedTeamFolder = CreateEffectFolder(TeamService.Red)\nInstance.new('AudioReverb').Parent = RedTeamFolder\n\nlocal YellowTeamFolder = CreateEffectFolder(TeamService.Yellow)\nInstance.new('AudioChorus').Parent = YellowTeamFolder\n\nlocal TeamChatServer = TeamChat.Init()\n</code></pre> <p>Client</p> <pre><code>-- Imports\nlocal TeamChat = require(path.to.module)\n\n-- Runtime\nlocal TeamChatClient = TeamChat.Init()\n</code></pre>"},{"location":"guide/examples/disable-team-voice-chat/","title":"Disable team voice chat","text":"<p>Server</p> <pre><code>-- Services\nlocal TeamService = game:GetService('Teams')\n\n-- Imports\nlocal TeamChat = require(path.to.module)\n\n-- Runtime\nlocal Team = TeamService.Team.To.Disable.Voice.For\n\n-- doesn't have to be a configuration instance, it could be any type of instance,\n-- but it's name HAS to be 'VoiceDisabled', and it HAS to be parented to the team\n-- you want to disable voice chat for\nlocal Configuration = Instance.new('Configuration')\nConfiguration.Name = 'VoiceDisabled'\nConfiguration.Parent = Team\n\nlocal TeamChatServer = TeamChat.Init()\n</code></pre> <p>Client</p> <pre><code>-- Imports\nlocal TeamChat = require(path.to.module)\n\n-- Runtime\nlocal TeamChatClient = TeamChat.Init()\n</code></pre>"}]}