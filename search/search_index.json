{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"api/AudioUtil/","title":"AudioUtil","text":"<p>Util library for dealing with the VoiceChatService AudioAPI</p> <p>Functions: - .CreateWire(Source, Target, Parent?) - .GetPlayersAudioDeviceInput(Player, ShouldYield) - .IsVoiceEnabledForTeam(Team) - .GetVoiceEffectsForTeam(Team)</p>"},{"location":"api/AudioUtil/#audioutilcreatewiresource-target-parent","title":"AudioUtil.CreateWire(Source, Target, Parent?)","text":"<p>Creates a wire connecting an audio stream to an audio receiver</p> <p>Parameters: - Source: An Instance Emitting an Audio Stream - Target: An Instance Receiving an Audio Stream - Parent: Any Instance</p>"},{"location":"api/AudioUtil/#audioutilgetplayersaudiodeviceinputplayer-shouldyield","title":"AudioUtil.GetPlayersAudioDeviceInput(Player, ShouldYield)","text":"<p>Returns a player's AudioDeviceInput</p> <p>Parameters: - Player: The player whose AudioDeviceInput you're trying to get - ShouldYield: If the function should yield for up to 10 seconds while waiting for the Target Player's AudioDeviceInput to Replicate</p>"},{"location":"api/AudioUtil/#audioutilisvoiceenabledforteamteam","title":"AudioUtil.IsVoiceEnabledForTeam(Team)","text":"<p>Returns true if there is no Instance parented to the team named 'VoiceDisabled', else false</p> <p>Parameters: - Team: The team to check</p>"},{"location":"api/AudioUtil/#audioutilgetvoiceeffectsforteamteam","title":"AudioUtil.GetVoiceEffectsForTeam(Team)","text":"<p>Returns the folder of VoiceEffects unter the team if it exists</p> <p>Paramters: - Team: The team with the VoiceEffects you are trying to get</p>"},{"location":"api/TeamChatClient/","title":"TeamChatClient","text":"<p>Team Voice Chat System for the client.</p> <p>Methods: - .Init() - :SetSpeakingCheckInterval(Value) - :GetSpeakingCheckInterval() - :SetSpeakingCheckInterval(Value) - :GetMinRmsLevelThreshold()</p>"},{"location":"api/TeamChatClient/#teamchatclientinit","title":"TeamChatClient.Init()","text":"<p>Called Upon TeamChat.Init() for the client. Initializes the Team Voice Chat System on the Client.</p>"},{"location":"api/TeamChatClient/#teamchatclientsetspeakingcheckintervalvalue","title":"TeamChatClient:SetSpeakingCheckInterval(Value)","text":"<p>Sets the update inverval in which TeamChatClient checks if the local player is speaking and if so, tells the server to fire the PlayerStartedSpeaking event.</p> <p>Parameters: - Value: The new value to set 'SpeakingCheckInterval' to</p>"},{"location":"api/TeamChatClient/#teamchatclientgetspeakingcheckinterval","title":"TeamChatClient:GetSpeakingCheckInterval()","text":"<p>Returns SpeakingCheckInterval</p>"},{"location":"api/TeamChatClient/#teamchatclientsetminrmslevelthresholdvalue","title":"TeamChatClient:SetMinRmsLevelThreshold(Value)","text":"<p>Sets the Minimum Speaking Volume Threshold.</p> <p>Parameters: - Value: The new value to update 'MinRmsLevelThreshold' to</p>"},{"location":"api/TeamChatClient/#teamchatclientgetminrmslevelthreshold","title":"TeamChatClient:GetMinRmsLevelThreshold()","text":"<p>Returns MinRmsLevelThreshold</p>"},{"location":"api/TeamChatServer/","title":"TeamChatServer","text":"<p>Team Voice Chat System for the Server.</p> <p>Methods: - .Init()</p>"},{"location":"api/TeamChatServer/#teamchatserverinit","title":"TeamChatServer.Init()","text":"<p>Called Upon TeamChat.Init() for the Server. Initializes the Team Voice Chat System on the Server.</p>"},{"location":"guide/getting-started/","title":"Getting Started","text":"<p>The setup is quite simple, you just need to require TeamChat and call the <code>.Init()</code> function.</p> <p>::: code-group ```lua [Server.lua] -- Imports local TeamChat = require(path.to.module)</p> <p>-- Runtime local TeamChatServer = TeamChat.Init()</p> <pre><code>\n```lua [Client.lua]\n-- Imports\nlocal TeamChat = require(path.to.module)\n\n-- Runtime\nlocal TeamChatClient = TeamChat.Init()\n</code></pre> <p>:::</p>"},{"location":"guide/installation/","title":"Installation","text":""},{"location":"guide/installation/#from-rbxm","title":"<code>From RBXM:</code>","text":"<p>Get the latest version of TeamVoice from here, and import it into studio and you're done!</p>"},{"location":"guide/examples/audio-effects/","title":"Audio effects","text":"<p>::: code-group ```lua [Server.lua] -- Services local TeamService = game:GetService('Teams')</p> <p>-- Imports local TeamChat = require(path.to.module)</p> <p>-- Runtime</p> <p>-- Setup Team Effects local function CreateEffectFolder(Parent: Team) : Folder     local Folder = Instance.new('Folder')     Folder.Name = 'VoiceEffects'     Folder.Parent = Parent</p> <pre><code>return Folder\n</code></pre> <p>end</p> <p>local BlueTeamFolder = CreateEffectFolder(TeamService.Blue) Instance.new('AudioEcho').Parent = BlueTeamFolder</p> <p>local RedTeamFolder = CreateEffectFolder(TeamService.Red) Instance.new('AudioReverb').Parent = RedTeamFolder</p> <p>local YellowTeamFolder = CreateEffectFolder(TeamService.Yellow) Instance.new('AudioChorus').Parent = YellowTeamFolder</p> <p>local TeamChatServer = TeamChat.Init()</p> <pre><code>```lua [Client.lua]\n-- Imports\nlocal TeamChat = require(path.to.module)\n\n-- Runtime\nlocal TeamChatClient = TeamChat.Init()\n</code></pre> <p>:::</p>"},{"location":"guide/examples/disable-team-voice-chat/","title":"Disable team voice chat","text":"<p>::: code-group</p> <p>```lua [Server.lua] -- Services local TeamService = game:GetService('Teams')</p> <p>-- Imports local TeamChat = require(path.to.module)</p> <p>-- Runtime local Team = TeamService.Team.To.Disable.Voice.For</p> <p>-- doesn't have to be a configuration instance, it could be any type of instance, -- but it's name HAS to be 'VoiceDisabled', and it HAS to be parented to the team -- you want to disable voice chat for local Configuration = Instance.new('Configuration') Configuration.Name = 'VoiceDisabled' Configuration.Parent = Team</p> <p>local TeamChatServer = TeamChat.Init()</p> <pre><code>\n\n```lua [Client.lua]\n-- Imports\nlocal TeamChat = require(path.to.module)\n\n-- Runtime\nlocal TeamChatClient = TeamChat.Init()\n</code></pre> <p>:::</p>"}]}