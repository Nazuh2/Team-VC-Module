{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Team Voice Chat Module","text":"<p>A lightweight, customizable and efficient Team Voice Chat Module.</p>"},{"location":"#update-200","title":"Update 2.0.0","text":"<ul> <li>Added TeamChatServer:SetTeamConfig(...) to handle updating a teams voice config</li> <li>Added Voice Types (Essentially just modules that can be set for a team using TeamChatServer:SetTeamConfig(...) to depict how voice chat works for a team e.g. enemy proximity chat)</li> <li>Changed how Voice Effects work. They are now binded to VoiceTypes instead of the entire team. You can do some really cool stuff with this, for example if you're making a horror game you could have to hunter have an audio effect that makes their voice sound scary, while you'd still be able to hear your teamates just fine.</li> <li>Removed support for team wide voice effects in favor of VoiceType binded voice effects.</li> </ul>"},{"location":"#update-120","title":"Update 1.2.0","text":"<p>Added Support for Voice Effects</p>"},{"location":"#update-110","title":"Update 1.1.0","text":"<p>Added Support for developers to have Teams with voice chat disabled</p>"},{"location":"#update-100","title":"Update 1.0.0","text":"<p>Added functionality to detect when other players on your team are speaking</p>"},{"location":"API/AudioUtil/","title":"AudioUtil","text":"<p>Util library for dealing with the VoiceChatService AudioAPI</p>"},{"location":"API/AudioUtil/#audioutilcreatewiresource-target-parent","title":"AudioUtil.CreateWire(Source, Target, Parent?)","text":"<p>Creates a wire connecting an audio stream to an audio receiver</p> <p>Parameters: - Source: An Instance Emitting an Audio Stream - Target: An Instance Receiving an Audio Stream - Parent: Any Instance</p> <p>Returns: - Wire: The wire connecting the Source to the Target</p>"},{"location":"API/AudioUtil/#audioutilgetplayersaudiodeviceinputplayer-shouldyield","title":"AudioUtil.GetPlayersAudioDeviceInput(Player, ShouldYield)","text":"<p>Returns a player's AudioDeviceInput</p> <p>Parameters: - Player: The player whose AudioDeviceInput you're trying to get - ShouldYield: If the function should yield for up to 10 seconds while waiting for the Target Player's AudioDeviceInput to Replicate</p> <p>Returns: - AudioDeviceInput?: The player's AudioDeviceInput, if it exists</p>"},{"location":"API/AudioUtil/#audioutilgetvoiceconfigforteamteam","title":"AudioUtil.GetVoiceConfigForTeam(Team)","text":"<p>Returns the voice config for a team if it exists</p> <p>Parameters: - Team: The team whose voice config we are trying to fetch</p> <p>Return: - Configuration?: The voice config for the team, if it exists</p>"},{"location":"API/AudioUtil/#audioutilisvoiceenabledforteamteam","title":"AudioUtil.IsVoiceEnabledForTeam(Team)","text":"<p>Returns true if there is no Instance parented to the team named 'VoiceDisabled', else false</p> <p>Parameters: - Team: The team to check</p> <p>Returns: - boolean: true if voice enabled, else false</p>"},{"location":"API/AudioUtil/#audioutilgetvoicetypesforteamteam","title":"AudioUtil.GetVoiceTypesForTeam(Team)","text":"<p>Parameters: - Team: The team to get the voice types from</p> <p>Returns: - Folder: A folder containing all the voice types for the team</p>"},{"location":"API/AudioUtil/#audioutilgetvoicetypesasstringarrayforteamteam","title":"AudioUtil.GetVoiceTypesAsStringArrayForTeam(Team)","text":"<p>Returns a string array of the voice types for the given team</p> <p>Parameters: - Team: The team to get the voice types from</p> <p>Returns: - { string }: A string array of the voice types</p>"},{"location":"API/AudioUtil/#audioutilgetvoiceeffectsforvoicetypevoicetype","title":"AudioUtil.GetVoiceEffectsForVoiceType(VoiceType)","text":"<p>Returns the children under the given voice type, assuming they're all valid audio effects</p> <p>Parameters: - Team: The team that holds the VoiceType instance - VoiceType: The VoiceType with the VoiceEffects you are trying to get</p> <p>Returns: - { Instance }: A list of the Voice Effects</p>"},{"location":"API/AudioUtil/#audioutilconnectwiresforvoiceeffectssource-target-team","title":"AudioUtil.ConnectWiresForVoiceEffects(Source, Target, Team)","text":"<p>Generates wires for all the voice effects in the team's VoiceEffects folder</p> <p>Parameters: - Source: The initial audio stream, presummably an AudioDeviceInput - Target: An AudioDeviceOutput that gets connected as the TargetInstance of the final wire - Team: The team the LocalPlayer is current apart of</p> <p>Returns: - { Wire }: The wires generated</p>"},{"location":"API/ConfigUtil/","title":"ConfigUtil","text":"<p>Util library to assist with creating and manipulating configs</p>"},{"location":"API/ConfigUtil/#config","title":"Config","text":"<pre><code>{\nVoiceTypes: { VoiceType },\nVoiceEnabled: boolean?,\n}\n</code></pre>"},{"location":"API/ConfigUtil/#voice-effect","title":"Voice Effect","text":"<pre><code>{\nObject: Instance,\nProperties: {\n[string]: any\n}\n}\n</code></pre>"},{"location":"API/ConfigUtil/#voice-type","title":"Voice Type","text":"<pre><code>{\nType: string,\nVoiceEffects: { VoiceEffect }?\n}\n</code></pre>"},{"location":"API/ConfigUtil/#configutilreconcileconfigconfigprototype","title":"ConfigUtil.ReconcileConfig(ConfigPrototype)","text":"<p>Takes in the given config prototype and returns a reconciled version</p> <p>Parameters: - ConfigPrototype: The config data to reconcile against the default config</p> <p>Returns: - Config: A reconciled version of ConfigPrototype</p>"},{"location":"API/ConfigUtil/#configutilcreatevoicetypemodulename-voiceeffects","title":"ConfigUtil.CreateVoiceType(ModuleName, VoiceEffects)","text":"<p>Parameters: - ModuleName: a name to refer to a module inside of TeamChat.VoiceTypes - VoiceEffects: an optional field to put the voice effects for this module</p> <p>Returns: - VoiceType: The created voice type</p>"},{"location":"API/ConfigUtil/#configutilgetdefaultconfig","title":"ConfigUtil.GetDefaultConfig()","text":"<p>Returns: - Config: The Default Config used when reconciling</p>"},{"location":"API/ConfigUtil/#configutilcreatevoiceeffecteffectname-effectproperties","title":"ConfigUtil.CreateVoiceEffect(EffectName, EffectProperties)","text":"<p>Creates a VoiceEffect Object for use in a config</p> <p>Parameters: - EffectName: The name of the effect you want to create. Must refer to a valid effect name! refer to VoiceEffectEnum for more info. - EffectProperties: A list of properties to apply to the effect upon creation. Invalid properties will error, but won't halt the effect creation process</p> <p>Returns: - VoiceEffect: A VoiceEffect object</p>"},{"location":"API/ConfigUtil/#configutilgetvoicetypeenum","title":"ConfigUtil.GetVoiceTypeEnum()","text":"<p>Returns: - Enum: a frozen version of the VoiceTypeEnum</p>"},{"location":"API/TeamChatClient/","title":"TeamChatClient","text":"<p>Team Voice Chat System for the client.</p> <p>--[[ TeamChatClient.Init() Called Upon TeamChat.Init() for the client. Initializes the Team Voice Chat System on the Client.</p>"},{"location":"API/TeamChatClient/#teamchatclientsetspeakingcheckintervalvalue","title":"TeamChatClient:SetSpeakingCheckInterval(Value)","text":"<p>Sets the update inverval in which TeamChatClient checks if the local player is speaking and if so, tells the server to fire the PlayerStartedSpeaking event.</p> <p>Parameters: - Value: The new value to set 'SpeakingCheckInterval' to</p>"},{"location":"API/TeamChatClient/#teamchatclientgetspeakingcheckinterval","title":"TeamChatClient:GetSpeakingCheckInterval()","text":"<p>Returns: - number: SpeakingCheckInterval</p>"},{"location":"API/TeamChatClient/#teamchatclientsetminrmslevelthresholdvalue","title":"TeamChatClient:SetMinRmsLevelThreshold(Value)","text":"<p>Sets the Minimum Speaking Volume Threshold.</p> <p>Parameters: - Value: The new value to update 'MinRmsLevelThreshold' to</p>"},{"location":"API/TeamChatClient/#teamchatclientgetminrmslevelthreshold","title":"TeamChatClient:GetMinRmsLevelThreshold()","text":"<p>Returns: - number: MinRmsLevelThreshold</p>"},{"location":"API/TeamChatServer/","title":"TeamChatServer","text":"<p>Team Voice Chat System for the Server.</p>"},{"location":"API/TeamChatServer/#teamchatserverinit","title":"TeamChatServer.Init()","text":"<p>Called Upon TeamChat.Init() for the Server. Initializes the Team Voice Chat System on the Server.</p> <p>Returns: - TeamChatServer: The TeamChat Server Instance</p>"},{"location":"API/TeamChatServer/#teamchatserversetteamconfigteam-config","title":"TeamChatServer:SetTeamConfig(Team, Config)","text":"<p>Updates a teams configuration</p> <p>Parameters: - Team: Team - Config: ConfigUtil.Config</p>"},{"location":"API/TeamChatServer/#teamchatservergetteamconfigteam","title":"TeamChatServer:GetTeamConfig(Team)","text":"<p>Returns the given team's config data</p> <p>Returns: - Config: ConfigUtil.Config</p>"},{"location":"API/TeamChatServer/#teamchatservergetteamconfiginstanceteam","title":"TeamChatServer:GetTeamConfigInstance(Team)","text":"<p>Returns the given team's config Instance</p> <p>Returns: - Configuration: A roblox Configuration Instance</p>"},{"location":"API/TeamChatServer/#teamchatservergetteamconfigsteam","title":"TeamChatServer:GetTeamConfigs(Team)","text":"<p>Returns the config data for all teams</p> <p>Returns: - { Config }: An Array of ConfigUtil.Config</p>"},{"location":"API/VoiceEffectEnum/","title":"VoiceEffectEnum","text":"<p>Util data module to help with creating voice effects</p>"},{"location":"API/VoiceEffectEnum/#voice-effects-table","title":"Voice Effects Table","text":"<pre><code>{\nReverb = 'AudioReverb',\nEcho = 'AudioEcho',\nChorus = 'AudioChorus',\nFlanger = 'AudioFlanger',\nFader = 'AudioFader',\nEqualizer = 'AudioEqualizer',\nCompressor = 'AudioCompressor',\nDistortion = 'AudioDistortion',\nPitchShifter = 'AudioPitchShifter'\n}\n</code></pre>"},{"location":"API/VoiceEffectEnum/#voiceeffectenumgetrandom","title":"VoiceEffectEnum.GetRandom()","text":"<p>Returns: - string: A random voice effect from the VoiceEffects table</p>"},{"location":"guide/basic-usage/","title":"Basic usage","text":"ServerClient <pre><code>-- Services\nlocal TeamService = game:GetService('Teams')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Imports\nlocal TeamChat = require(Path.To.Module)\n\nlocal Libraries = Path.To.Module.Libraries\nlocal ConfigUtil = require(Libraries.ConfigUtil)\nlocal VoiceEffectEnum = require(Libraries.VoiceEffectEnum)\n\n-- Local Variables\nlocal VoiceTypeEnum = ConfigUtil.GetVoiceTypeEnum()\n\n-- Runtime\nlocal TeamChatServer = TeamChat.Init()\n\n-- Create Team\nlocal Team = Instance.new('Team')\nTeam.Name = 'DefaultTeam'\nTeam.AutoAssignable = true\nTeam.Parent = TeamService\n\n-- Customize Team Voice Configs\nTeamChatServer:SetTeamConfig(Team, {\n    VoiceTypes = {\n        ConfigUtil.CreateVoiceType(VoiceTypeEnum.TeamDirect)\n    }\n})\n</code></pre> <pre><code>-- Imports\nlocal TeamChat = require(Path.To.Module)\n\n-- Runtime\nlocal TeamChatClient = TeamChat.Init()\n</code></pre>"},{"location":"guide/getting-started/","title":"Getting Started","text":"<p>The setup is quite simple, you just need to require TeamChat and call the <code>.Init()</code> function.</p> <p>Server <pre><code>-- Imports\nlocal TeamChat = require(path.to.module)\n\n-- Runtime\nlocal TeamChatServer = TeamChat.Init()\n</code></pre></p> <p>Client <pre><code>-- Imports\nlocal TeamChat = require(path.to.module)\n\n-- Runtime\nlocal TeamChatClient = TeamChat.Init()\n</code></pre></p>"},{"location":"guide/installation/","title":"Installation","text":""},{"location":"guide/installation/#from-rbxm","title":"<code>From RBXM:</code>","text":"<p>Get the latest version of TeamVoice from here, and import it into studio and you're done!</p>"},{"location":"guide/examples/audio-effects/","title":"Audio effects","text":"ServerClient <pre><code>-- Services\nlocal TeamService = game:GetService('Teams')\nlocal ReplicatedStorage = game:GetService('ReplicatedStorage')\n\n-- Imports\nlocal TeamChat = require(Path.To.Module)\n\nlocal Libraries = Path.To.Module.Libraries\nlocal ConfigUtil = require(Libraries.ConfigUtil)\nlocal VoiceEffectEnum = require(Libraries.VoiceEffectEnum)\n\n-- Local Variables\nlocal VoiceTypeEnum = ConfigUtil.GetVoiceTypeEnum()\n\n-- Runtime\nlocal TeamChatServer = TeamChat.Init()\n\n-- Create Team\nlocal Team = Instance.new('Team')\nTeam.Name = 'DefaultTeam'\nTeam.AutoAssignable = true\nTeam.Parent = TeamService\n\n-- Customize Team Voice Configs\nTeamChatServer:SetTeamConfig(Team, {\n    VoiceTypes = {\n        ConfigUtil.CreateVoiceType(\n            VoiceTypeEnum.TeamDirect,\n            {\n                ConfigUtil.CreateVoiceEffect(VoiceEffectEnum.Chorus)\n            }\n        )\n    }\n})\n</code></pre> <pre><code>-- Imports\nlocal TeamChat = require(Path.To.Module)\n\n-- Runtime\nlocal TeamChatClient = TeamChat.Init()\n</code></pre>"},{"location":"guide/examples/disable-team-voice-chat/","title":"Disable team voice chat","text":"ServerClient <pre><code>-- Services\nlocal TeamService = game:GetService('Teams')\n\n-- Imports\nlocal TeamChat = require(path.to.module)\n\n-- Runtime\nlocal TeamChatServer = TeamChat.Init()\n\nlocal Team = TeamService.Team.To.Disable.Voice.For\n\nTeamChatServer:SetTeamConfig(Team, {\n    VoiceEnabled = false\n})\n</code></pre> <pre><code>-- Imports\nlocal TeamChat = require(path.to.module)\n\n-- Runtime\nlocal TeamChatClient = TeamChat.Init()\n</code></pre>"}]}