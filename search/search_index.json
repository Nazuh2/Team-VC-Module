{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"api/","text":"","title":"Index"},{"location":"api/AudioUtil/","text":"AudioUtil Util library for dealing with the VoiceChatService AudioAPI Functions: - .CreateWire(Source, Target, Parent?) - .GetPlayersAudioDeviceInput(Player, ShouldYield) - .IsVoiceEnabledForTeam(Team) - .GetVoiceEffectsForTeam(Team) AudioUtil.CreateWire(Source, Target, Parent?) Creates a wire connecting an audio stream to an audio receiver Parameters: - Source: An Instance Emitting an Audio Stream - Target: An Instance Receiving an Audio Stream - Parent: Any Instance AudioUtil.GetPlayersAudioDeviceInput(Player, ShouldYield) Returns a player's AudioDeviceInput Parameters: - Player: The player whose AudioDeviceInput you're trying to get - ShouldYield: If the function should yield for up to 10 seconds while waiting for the Target Player's AudioDeviceInput to Replicate AudioUtil.IsVoiceEnabledForTeam(Team) Returns true if there is no Instance parented to the team named 'VoiceDisabled', else false Parameters: - Team: The team to check AudioUtil.GetVoiceEffectsForTeam(Team) Returns the folder of VoiceEffects unter the team if it exists Paramters: - Team: The team with the VoiceEffects you are trying to get","title":"AudioUtil"},{"location":"api/AudioUtil/#audioutil","text":"Util library for dealing with the VoiceChatService AudioAPI Functions: - .CreateWire(Source, Target, Parent?) - .GetPlayersAudioDeviceInput(Player, ShouldYield) - .IsVoiceEnabledForTeam(Team) - .GetVoiceEffectsForTeam(Team)","title":"AudioUtil"},{"location":"api/AudioUtil/#audioutilcreatewiresource-target-parent","text":"Creates a wire connecting an audio stream to an audio receiver Parameters: - Source: An Instance Emitting an Audio Stream - Target: An Instance Receiving an Audio Stream - Parent: Any Instance","title":"AudioUtil.CreateWire(Source, Target, Parent?)"},{"location":"api/AudioUtil/#audioutilgetplayersaudiodeviceinputplayer-shouldyield","text":"Returns a player's AudioDeviceInput Parameters: - Player: The player whose AudioDeviceInput you're trying to get - ShouldYield: If the function should yield for up to 10 seconds while waiting for the Target Player's AudioDeviceInput to Replicate","title":"AudioUtil.GetPlayersAudioDeviceInput(Player, ShouldYield)"},{"location":"api/AudioUtil/#audioutilisvoiceenabledforteamteam","text":"Returns true if there is no Instance parented to the team named 'VoiceDisabled', else false Parameters: - Team: The team to check","title":"AudioUtil.IsVoiceEnabledForTeam(Team)"},{"location":"api/AudioUtil/#audioutilgetvoiceeffectsforteamteam","text":"Returns the folder of VoiceEffects unter the team if it exists Paramters: - Team: The team with the VoiceEffects you are trying to get","title":"AudioUtil.GetVoiceEffectsForTeam(Team)"},{"location":"api/TeamChatClient/","text":"TeamChatClient Team Voice Chat System for the client. Methods: - .Init() - :SetSpeakingCheckInterval(Value) - :GetSpeakingCheckInterval() - :SetSpeakingCheckInterval(Value) - :GetMinRmsLevelThreshold() TeamChatClient.Init() Called Upon TeamChat.Init() for the client. Initializes the Team Voice Chat System on the Client. TeamChatClient:SetSpeakingCheckInterval(Value) Sets the update inverval in which TeamChatClient checks if the local player is speaking and if so, tells the server to fire the PlayerStartedSpeaking event. Parameters: - Value: The new value to set 'SpeakingCheckInterval' to TeamChatClient:GetSpeakingCheckInterval() Returns SpeakingCheckInterval TeamChatClient:SetMinRmsLevelThreshold(Value) Sets the Minimum Speaking Volume Threshold. Parameters: - Value: The new value to update 'MinRmsLevelThreshold' to TeamChatClient:GetMinRmsLevelThreshold() Returns MinRmsLevelThreshold","title":"TeamChatClient"},{"location":"api/TeamChatClient/#teamchatclient","text":"Team Voice Chat System for the client. Methods: - .Init() - :SetSpeakingCheckInterval(Value) - :GetSpeakingCheckInterval() - :SetSpeakingCheckInterval(Value) - :GetMinRmsLevelThreshold()","title":"TeamChatClient"},{"location":"api/TeamChatClient/#teamchatclientinit","text":"Called Upon TeamChat.Init() for the client. Initializes the Team Voice Chat System on the Client.","title":"TeamChatClient.Init()"},{"location":"api/TeamChatClient/#teamchatclientsetspeakingcheckintervalvalue","text":"Sets the update inverval in which TeamChatClient checks if the local player is speaking and if so, tells the server to fire the PlayerStartedSpeaking event. Parameters: - Value: The new value to set 'SpeakingCheckInterval' to","title":"TeamChatClient:SetSpeakingCheckInterval(Value)"},{"location":"api/TeamChatClient/#teamchatclientgetspeakingcheckinterval","text":"Returns SpeakingCheckInterval","title":"TeamChatClient:GetSpeakingCheckInterval()"},{"location":"api/TeamChatClient/#teamchatclientsetminrmslevelthresholdvalue","text":"Sets the Minimum Speaking Volume Threshold. Parameters: - Value: The new value to update 'MinRmsLevelThreshold' to","title":"TeamChatClient:SetMinRmsLevelThreshold(Value)"},{"location":"api/TeamChatClient/#teamchatclientgetminrmslevelthreshold","text":"Returns MinRmsLevelThreshold","title":"TeamChatClient:GetMinRmsLevelThreshold()"},{"location":"api/TeamChatServer/","text":"TeamChatServer Team Voice Chat System for the Server. Methods: - .Init() TeamChatServer.Init() Called Upon TeamChat.Init() for the Server. Initializes the Team Voice Chat System on the Server.","title":"TeamChatServer"},{"location":"api/TeamChatServer/#teamchatserver","text":"Team Voice Chat System for the Server. Methods: - .Init()","title":"TeamChatServer"},{"location":"api/TeamChatServer/#teamchatserverinit","text":"Called Upon TeamChat.Init() for the Server. Initializes the Team Voice Chat System on the Server.","title":"TeamChatServer.Init()"},{"location":"guide/","text":"Overview Team Voice Chat Module is a lightweight feature packed team based voice chat manager.","title":"Overview"},{"location":"guide/#overview","text":"Team Voice Chat Module is a lightweight feature packed team based voice chat manager.","title":"Overview"},{"location":"guide/getting-started/","text":"Getting Started The setup is quite simple, you just need to require TeamChat and call the .Init() function. ::: code-group ```lua [Server.lua] -- Imports local TeamChat = require(path.to.module) -- Runtime local TeamChatServer = TeamChat.Init() ```lua [Client.lua] -- Imports local TeamChat = require(path.to.module) -- Runtime local TeamChatClient = TeamChat.Init() :::","title":"Getting Started"},{"location":"guide/getting-started/#getting-started","text":"The setup is quite simple, you just need to require TeamChat and call the .Init() function. ::: code-group ```lua [Server.lua] -- Imports local TeamChat = require(path.to.module) -- Runtime local TeamChatServer = TeamChat.Init() ```lua [Client.lua] -- Imports local TeamChat = require(path.to.module) -- Runtime local TeamChatClient = TeamChat.Init() :::","title":"Getting Started"},{"location":"guide/installation/","text":"Installation From RBXM: Get the latest version of TeamVoice from here , and import it into studio and you're done!","title":"Installation"},{"location":"guide/installation/#installation","text":"","title":"Installation"},{"location":"guide/installation/#from-rbxm","text":"Get the latest version of TeamVoice from here , and import it into studio and you're done!","title":"From RBXM:"},{"location":"guide/examples/audio-effects/","text":"::: code-group ```lua [Server.lua] -- Services local TeamService = game:GetService('Teams') -- Imports local TeamChat = require(path.to.module) -- Runtime -- Setup Team Effects local function CreateEffectFolder(Parent: Team) : Folder local Folder = Instance.new('Folder') Folder.Name = 'VoiceEffects' Folder.Parent = Parent return Folder end local BlueTeamFolder = CreateEffectFolder(TeamService.Blue) Instance.new('AudioEcho').Parent = BlueTeamFolder local RedTeamFolder = CreateEffectFolder(TeamService.Red) Instance.new('AudioReverb').Parent = RedTeamFolder local YellowTeamFolder = CreateEffectFolder(TeamService.Yellow) Instance.new('AudioChorus').Parent = YellowTeamFolder local TeamChatServer = TeamChat.Init() ```lua [Client.lua] -- Imports local TeamChat = require(path.to.module) -- Runtime local TeamChatClient = TeamChat.Init() :::","title":"Audio effects"},{"location":"guide/examples/disable-team-voice-chat/","text":"::: code-group ```lua [Server.lua] -- Services local TeamService = game:GetService('Teams') -- Imports local TeamChat = require(path.to.module) -- Runtime local Team = TeamService.Team.To.Disable.Voice.For -- doesn't have to be a configuration instance, it could be any type of instance, -- but it's name HAS to be 'VoiceDisabled', and it HAS to be parented to the team -- you want to disable voice chat for local Configuration = Instance.new('Configuration') Configuration.Name = 'VoiceDisabled' Configuration.Parent = Team local TeamChatServer = TeamChat.Init() ```lua [Client.lua] -- Imports local TeamChat = require(path.to.module) -- Runtime local TeamChatClient = TeamChat.Init() :::","title":"Disable team voice chat"}]}